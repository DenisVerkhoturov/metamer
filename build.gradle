plugins {
    id 'java'
    id 'checkstyle'
    id 'info.solidsoft.pitest' version '1.4.0'
    id "me.champeau.gradle.jmh" version "0.4.8"
}

allprojects {
    buildscript {
        configurations.maybeCreate('pitest')
        dependencies {
            pitest 'org.pitest:pitest-junit5-plugin:0.8'
        }
    }

    apply plugin: 'java'
    apply plugin: 'checkstyle'

    version '1.0.0'

    sourceCompatibility = 11
    targetCompatibility = 11

    wrapper {
        distributionType = Wrapper.DistributionType.ALL
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'io.vavr:vavr:0.9.3'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
        testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    }

    test {
        useJUnitPlatform()

        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED'
            exceptionFormat = 'full'
            showStackTraces = false
        }
    }

    checkstyle {
        toolVersion '7.8.1'
    }

    pitest {
        testPlugin = 'junit5'
        targetClasses = ['metamer.*']
        targetTests = ['metamer.*']
        mainSourceSets = [':cli', ':assembler', ':utils' ].collect { project(it).sourceSets.main }
        testSourceSets = [':cli', ':assembler', ':utils' ].collect { project(it).sourceSets.test }
        mutators = ['ALL']
        outputFormats = ['XML', 'HTML']
        timestampedReports = false
        threads = 4
    }
}

project('cli') {
    jar {
        manifest {
            attributes 'Main-Class': 'metamer.cmdparser.CliHandler'
        }

        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    dependencies {
        compile project(':assembler')
        compile 'commons-cli:commons-cli:1.4'
    }
}

project('assembler') {
    dependencies {
        compile project(':api')
        compile project(':utils')
    }
}

project('functional_tests') {
    dependencies {
        compile project(':cli')
    }
}

project('benchmark') {
    apply plugin: "me.champeau.gradle.jmh"

    dependencies {
        jmh 'org.openjdk.jmh:jmh-core:1.19'
        jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.19'
    }
}
